{"version":3,"sources":["spongeqr-core/PayloadTypes.ts","spongeqr-core/SpongeQR.ts","components/RenderQR.tsx","containers/App.tsx","index.tsx"],"names":["Message","data","URL","WIFI","wifiData","this","authType","ssid","password","Email","emailData","contact","subject","message","SpongeQR","payload","canvas","renderOptions","QRCode","toCanvas","scale","margin","err","RenderQR","props","spongeQR","renderCanvas","useRef","style","paddingLeft","paddingTop","ref","onClick","current","console","error","generateQRFromPayload","App","Helmet","rel","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAYaA,EACT,WAAmBC,GAAe,yBAAfA,QAGVC,EACT,WAAmBD,GAAe,yBAAfA,QAOVE,EAGT,WAAoBC,GAA+D,yBAA/DA,WAA8D,KAF3EH,UAE2E,EAC9EI,KAAKJ,KAAL,iBAAsBG,EAASE,SAA/B,cAA6CF,EAASG,KAAtD,cAAgEH,EAASI,SAAzE,MAIKC,EAGT,WAAoBC,GAAiE,yBAAjEA,YAAgE,KAF7ET,UAE6E,EAChFI,KAAKJ,KAAL,iBAAsBS,EAAUC,QAAhC,oBAAmDD,EAAUE,QAA7D,iBAA6EF,EAAUG,U,yBCjBhFC,E,8GAfPC,EACAC,EACAC,GAEAC,IAAOC,SACHH,EACAD,EAAQd,KAFZ,OAGIgB,QAHJ,IAGIA,IAAiB,CAAEG,MAAO,GAAIC,OAAQ,IACtC,SAACC,GACG,GAAIA,EAAK,MAAMA,S,KCehBC,EAvBE,SAACC,GACd,IAAMC,EAAW,IAAIX,EACfC,EAAUS,EAAMT,QAChBW,EAAeC,iBAA0B,MAY/C,OACI,sBAAKC,MAAO,CAACC,YAAa,QAASC,WAAY,SAA/C,UACI,wBAAQC,IAAKL,IACb,wBAAQM,QAbW,WACvB,IAAMhB,EAASU,EAAaO,QAEzB,OAASjB,EAIZkB,QAAQC,MAAM,kDAHVV,EAASW,sBAAsBrB,EAASC,IASxC,6BCOGqB,EAxBH,WACR,OACI,qCACI,eAACC,EAAA,EAAD,WAEI,sBACIC,IAAI,aACJC,KAAK,gFAET,sBACID,IAAI,aACJC,KAAK,+DAKb,cAAC,EAAD,CAAUzB,QAAS,IAAIb,EAAI,8NAC3B,cAAC,EAAD,CAAUa,QAAS,IAAIf,EAAQ,iBAC/B,cAAC,EAAD,CAAUe,QAAS,IAAIZ,EAAK,CAACG,SAAU,MAAOC,KAAM,YAAaC,SAAU,yBAC3E,cAAC,EAAD,CAAUO,QAAS,IAAIN,EAAM,CAACE,QAAS,sBAAuBC,QAAS,MAAOC,QAAS,sBCpBnG4B,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.c7f6d2fd.chunk.js","sourcesContent":["// types are compile time\r\n// function content is runtime\r\n// content runtime - function result compile time checks\r\n// Typeguard - https://basarat.gitbook.io/typescript/type-system/typeguard#user-defined-type-guards\r\n// export function isPayloadMultiFormat(arg: any): arg is PayloadMultiFormat {\r\n    //     return 'format' in arg;\r\n    // }\r\n    \r\nexport interface Payload {\r\n    data: string;\r\n};\r\n// Payload Types\r\nexport class Message implements Payload {\r\n    constructor(public data: string) {}\r\n}\r\n\r\nexport class URL implements Payload {\r\n    constructor(public data: string) {}\r\n}\r\n\r\nexport class Phone implements Payload {\r\n    constructor(public data: string) {}\r\n}\r\n\r\nexport class WIFI implements Payload {\r\n    public data: string;\r\n\r\n    constructor(private wifiData: {authType: string, ssid: string, password: string}) {\r\n        this.data = `WIFI:T:${wifiData.authType};S:${wifiData.ssid};P:${wifiData.password};`;\r\n    }\r\n}\r\n\r\nexport class Email implements Payload {\r\n    public data: string;\r\n\r\n    constructor(private emailData: {contact: string, subject: string, message: string}) {\r\n        this.data = `mailto:${emailData.contact}?subject=${emailData.subject}&body=${emailData.message}`;\r\n    }\r\n}\r\n","import QRCode from \"qrcode\";\r\nimport { Payload } from \"./PayloadTypes\";\r\nclass SpongeQR {\r\n    public generateQRFromPayload(\r\n        payload: Payload,\r\n        canvas: HTMLCanvasElement,\r\n        renderOptions?: QRCode.QRCodeRenderersOptions\r\n    ): void {\r\n        QRCode.toCanvas(\r\n            canvas,\r\n            payload.data,\r\n            renderOptions ?? { scale: 10, margin: 0 },\r\n            (err) => {\r\n                if (err) throw err;\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport default SpongeQR;\r\n","import { useRef } from 'react';\r\n\r\nimport SpongeQR from '../spongeqr-core/SpongeQR';\r\nimport { Payload } from '../spongeqr-core/PayloadTypes';\r\n\r\nconst RenderQR = (props: { payload:  Payload}) => {\r\n    const spongeQR = new SpongeQR();\r\n    const payload = props.payload;\r\n    const renderCanvas = useRef<HTMLCanvasElement>(null);\r\n\r\n    const renderClickHandler = () => {\r\n        const canvas = renderCanvas.current;\r\n\r\n        if(null !== canvas) { // ensure canvas value is of the right type for typescript to work with.\r\n            spongeQR.generateQRFromPayload(payload, canvas);\r\n            return;\r\n        }\r\n        console.error(\"[RenderQR Component] - CANVAS NOT RENDERING...\");\r\n    }\r\n\r\n    return(\r\n        <div style={{paddingLeft: '100px', paddingTop: '100px'}}>\r\n            <canvas ref={renderCanvas} />\r\n            <button onClick={renderClickHandler}>Generate QR</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RenderQR;","import \"./reset.css\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport { URL, Message, WIFI, Email } from '../spongeqr-core/PayloadTypes';\r\nimport RenderQR from '../components/RenderQR';\r\n\r\nconst App = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                {/* React - Material UI Includes */}\r\n                <link\r\n                    rel=\"stylesheet\"\r\n                    href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\r\n                />\r\n                <link\r\n                    rel=\"stylesheet\"\r\n                    href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\r\n                />\r\n            </Helmet>\r\n            \r\n            {/* Test - will remove later before implementing views/components */}\r\n            <RenderQR payload={new URL('https://www.linkedin.com/pulse/right-way-say-i-want-grow-engineering-interview-daniel-bean/?trk=eml-email_series_follow_newsletter_01-hero-1-title_link&midToken=AQGgXWoW5CzmbQ&fromEmail=fromEmail&ut=1aixkom3Mhw9A1   ')}/>\r\n            <RenderQR payload={new Message('Hello world')} />\r\n            <RenderQR payload={new WIFI({authType: 'WPA', ssid: 'WIFITHING', password: 'passwordispassword'})} />\r\n            <RenderQR payload={new Email({contact: 'fakeemail@email.com', subject: 'POG', message: 'Hello World'})} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./containers/App\";\r\n//import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}