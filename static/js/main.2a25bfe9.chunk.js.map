{"version":3,"sources":["spongeqr-core/PayloadTypes.ts","spongeqr-core/SpongeQR.ts","components/RenderQR.tsx","containers/App.tsx","index.tsx"],"names":["Message","data","URL","WIFI","wifiData","this","authType","ssid","password","Email","emailData","contact","subject","message","SpongeQR","payload","canvas","renderOptions","QRCode","toCanvas","scale","margin","err","RenderQR","props","spongeQR","renderCanvas","useRef","style","paddingLeft","paddingTop","ref","onClick","current","console","error","generateQRFromPayload","App","Helmet","rel","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAYaA,EACT,WAAmBC,GAAe,yBAAfA,QAGVC,EACT,WAAmBD,GAAe,yBAAfA,QAOVE,EAGT,WAAoBC,GAA+D,yBAA/DA,WAA8D,KAF3EH,UAE2E,EAC9EI,KAAKJ,KAAL,iBAAsBG,EAASE,SAA/B,cAA6CF,EAASG,KAAtD,cAAgEH,EAASI,SAAzE,MAIKC,EAGT,WAAoBC,GAAiE,yBAAjEA,YAAgE,KAF7ET,UAE6E,EAChFI,KAAKJ,KAAL,iBAAsBS,EAAUC,QAAhC,oBAAmDD,EAAUE,QAA7D,iBAA6EF,EAAUG,U,yBCjBhFC,E,8GAfPC,EACAC,EACAC,GAEAC,IAAOC,SACHH,EACAD,EAAQd,KAFZ,OAGIgB,QAHJ,IAGIA,IAAiB,CAAEG,MAAO,GAAIC,OAAQ,IACtC,SAACC,GACG,GAAIA,EAAK,MAAMA,S,KCehBC,EAvBE,SAACC,GACd,IAAMC,EAAW,IAAIX,EACfC,EAAUS,EAAMT,QAChBW,EAAeC,iBAA0B,MAY/C,OACI,sBAAKC,MAAO,CAACC,YAAa,QAASC,WAAY,SAA/C,UACI,wBAAQC,IAAKL,IACb,wBAAQM,QAbW,WACvB,IAAMhB,EAASU,EAAaO,QAEzB,OAASjB,EAIZkB,QAAQC,MAAM,kDAHVV,EAASW,sBAAsBrB,EAASC,IASxC,6BCOGqB,EAxBH,WACR,OACI,qCACI,eAACC,EAAA,EAAD,WAEI,sBACIC,IAAI,aACJC,KAAK,gFAET,sBACID,IAAI,aACJC,KAAK,+DAKb,cAAC,EAAD,CAAUzB,QAAS,IAAIb,EAAI,8NAC3B,cAAC,EAAD,CAAUa,QAAS,IAAIf,EAAQ,iBAC/B,cAAC,EAAD,CAAUe,QAAS,IAAIZ,EAAK,CAACG,SAAU,MAAOC,KAAM,YAAaC,SAAU,yBAC3E,cAAC,EAAD,CAAUO,QAAS,IAAIN,EAAM,CAACE,QAAS,sBAAuBC,QAAS,MAAOC,QAAS,sBCpBnG4B,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.2a25bfe9.chunk.js","sourcesContent":["// types are compile time\n// function content is runtime\n// content runtime - function result compile time checks\n// Typeguard - https://basarat.gitbook.io/typescript/type-system/typeguard#user-defined-type-guards\n// export function isPayloadMultiFormat(arg: any): arg is PayloadMultiFormat {\n    //     return 'format' in arg;\n    // }\n    \nexport interface Payload {\n    data: string;\n};\n// Payload Types\nexport class Message implements Payload {\n    constructor(public data: string) {}\n}\n\nexport class URL implements Payload {\n    constructor(public data: string) {}\n}\n\nexport class Phone implements Payload {\n    constructor(public data: string) {}\n}\n\nexport class WIFI implements Payload {\n    public data: string;\n\n    constructor(private wifiData: {authType: string, ssid: string, password: string}) {\n        this.data = `WIFI:T:${wifiData.authType};S:${wifiData.ssid};P:${wifiData.password};`;\n    }\n}\n\nexport class Email implements Payload {\n    public data: string;\n\n    constructor(private emailData: {contact: string, subject: string, message: string}) {\n        this.data = `mailto:${emailData.contact}?subject=${emailData.subject}&body=${emailData.message}`;\n    }\n}\n","import QRCode from \"qrcode\";\nimport { Payload } from \"./PayloadTypes\";\nclass SpongeQR {\n    public generateQRFromPayload(\n        payload: Payload,\n        canvas: HTMLCanvasElement,\n        renderOptions?: QRCode.QRCodeRenderersOptions\n    ): void {\n        QRCode.toCanvas(\n            canvas,\n            payload.data,\n            renderOptions ?? { scale: 10, margin: 0 },\n            (err) => {\n                if (err) throw err;\n            }\n        );\n    }\n}\n\nexport default SpongeQR;\n","import { useRef } from 'react';\n\nimport SpongeQR from '../spongeqr-core/SpongeQR';\nimport { Payload } from '../spongeqr-core/PayloadTypes';\n\nconst RenderQR = (props: { payload:  Payload}) => {\n    const spongeQR = new SpongeQR();\n    const payload = props.payload;\n    const renderCanvas = useRef<HTMLCanvasElement>(null);\n\n    const renderClickHandler = () => {\n        const canvas = renderCanvas.current;\n\n        if(null !== canvas) { // ensure canvas value is of the right type for typescript to work with.\n            spongeQR.generateQRFromPayload(payload, canvas);\n            return;\n        }\n        console.error(\"[RenderQR Component] - CANVAS NOT RENDERING...\");\n    }\n\n    return(\n        <div style={{paddingLeft: '100px', paddingTop: '100px'}}>\n            <canvas ref={renderCanvas} />\n            <button onClick={renderClickHandler}>Generate QR</button>\n        </div>\n    );\n}\n\nexport default RenderQR;","import \"./reset.css\";\nimport { Helmet } from \"react-helmet\";\n\nimport { URL, Message, WIFI, Email } from '../spongeqr-core/PayloadTypes';\nimport RenderQR from '../components/RenderQR';\n\nconst App = () => {\n    return (\n        <>\n            <Helmet>\n                {/* React - Material UI Includes */}\n                <link\n                    rel=\"stylesheet\"\n                    href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n                />\n                <link\n                    rel=\"stylesheet\"\n                    href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n                />\n            </Helmet>\n            \n            {/* Test - will remove later before implementing views/components */}\n            <RenderQR payload={new URL('https://www.linkedin.com/pulse/right-way-say-i-want-grow-engineering-interview-daniel-bean/?trk=eml-email_series_follow_newsletter_01-hero-1-title_link&midToken=AQGgXWoW5CzmbQ&fromEmail=fromEmail&ut=1aixkom3Mhw9A1   ')}/>\n            <RenderQR payload={new Message('Hello world')} />\n            <RenderQR payload={new WIFI({authType: 'WPA', ssid: 'WIFITHING', password: 'passwordispassword'})} />\n            <RenderQR payload={new Email({contact: 'fakeemail@email.com', subject: 'POG', message: 'Hello World'})} />\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./containers/App\";\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}